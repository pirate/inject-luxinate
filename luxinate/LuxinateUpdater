#!/usr/bin/env python
#-*- coding:UTF-8 -*-
#
# @author  Ritashugisha
# @contact ritashugisha@gmail.com
# @program Luxinate - Alfred.v2 Streamed Media Downloader
# @version <v$VERSIONr$RELEASE>
#
# Luxinate - Alfred.v2 Streamed Media Downloader
# Copyright (C) 2014 Ritashugisha
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import imp
import json
import urllib
import traceback
import tempfile
import optparse

"""
.. py:class LuxinateUpdate()
Used to update Luxinate.
"""
class LuxinateUpdate():

    """
    .. py:function __init__(self, orig, lux):
    Update Luxinate to preferred version.

    :param str orig: Original Luxinate.py to update
    :param str lux: Temporary Luxinate object to handle interactivity
    """
    def __init__(self, orig, lux):
        self.resource = 'https://raw.githubusercontent.com/Ritashugisha/Luxinate/master/Versions/'
        self.luxinate = imp.load_source('Luxinate', lux)
        self.binaries = self.luxinate.Binaries()
        self.utils = self.luxinate.Utils()
        self.log = self.luxinate.Logger('updater')
        self.json = json.loads(urllib.urlopen('%sversions.json' % self.resource).read())
        try:
            if float(self.luxinate.VERSION) < float(self.json['preferred']):
                install = self.binaries.cocoa.msgbox(title = self.luxinate.PROGRAM,
                    text = 'Update Available!',
                    informative_text = 'Luxinate has an update available (%s)' % self.json['preferred'],
                    button1 = 'Install',
                    button2 = 'Ignore')
                if int(install[0]) == 1:
                    self.log.info('updating Luxinate from (%s) to (%s)' % (self.luxinate.VERSION, self.json['preferred']))
                    self.utils.runProcess('rm -rf %s' % self.utils.formatConsole(orig))
                    self.utils.runProcess('curl %s -o %s && chmod a+x %s' % (self.json['versions'][self.json['preferred']],
                        self.utils.formatConsole(orig), self.utils.formatConsole(orig)))
                    self.binaries.notifier.notification(title = self.luxinate.PROGRAM,
                        subtitle = 'Updated Luxinate',
                        message = 'You have been updated from (%s) to (%s)' % (self.luxinate.VERSION, self.json['preferred']),
                        sound = 'Purr',
                        sender = self.binaries.sender)
            else:
                self.binaries.cocoa.msgbox(title = self.luxinate.PROGRAM,
                    text = 'No Updates Available',
                    informative_text = u'\u2665\tThanks for checking though!',
                    button1 = 'Ok')
            self.utils.runProcess('rm -rf %s' % self.utils.formatConsole(lux))
        except:
            os.system(''.join(['osascript -e \'display alert "An Unexpected Error Occured!" ',
                'message "%s\nPlease view log and report bugs to author at:\nritashugisha@gmail.com" as critical\'' % 
                traceback.format_exc().replace('"','').replace("'",'')]))

"""
.. py:function _root_init_args()
Handle command line arguments.
"""
def _root_init_args():
    parser = optparse.OptionParser(description = 'Luxinate Updater')
    parser.add_option('-l', dest = 'lux', help = 'path to Luxinate.py to be updated')
    (opts, args) = parser.parse_args()
    if not opts.lux or not os.path.exists(opts.lux):
        sys.exit('Must give valid path to Luxinate.py (-l="<LUXINATE>")')
    else:
        tempLux = tempfile.mkstemp()[1]
        os.system('cp "%s" "%s"' % (opts.lux, tempLux))
        LuxinateUpdate(opts.lux, tempLux)

if __name__ in '__main__':
    _root_init_args()

















